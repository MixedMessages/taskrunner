package main

import (
	"context"
	exp "expvar"
	"flag"
	"fmt"
	"log"
	"net"
	"net/http"
	"os"
	"os/signal"
	"runtime"
	"strconv"
	"sync"
	"syscall"

	"github.com/MixedMessages/taskrunner"
	"github.com/go-kit/kit/metrics/expvar"
)

// HelloWorldTask wraps a number that prefixes the hello world message
// generated by the task.
type HelloWorldTask struct {
	num int
}

// Task implements the taskrunner.Task interface.
// Returns a string that says Hello World! with a number prefixed.
func (p *HelloWorldTask) Task(context.Context) (interface{}, error) {
	return fmt.Sprintf("%d: Hello World!", p.num), nil
}

func main() {
	workers := flag.Int("workers", runtime.NumCPU()+1, "The number of concurrent workers to start.")
	port := flag.Int("port", 8080, "Port to run the HTTP server.")

	flag.Parse()

	var wg sync.WaitGroup

	// Create the runner.
	runner, err := taskrunner.NewTaskRunner(
		taskrunner.OptionMaxGoroutines(*workers),
		taskrunner.OptionTaskCounter(expvar.NewCounter("tasks")),
		taskrunner.OptionUnhandledPromisesGauge(expvar.NewGauge("unhandled_promises")),
		taskrunner.OptionWorkersGauge(expvar.NewGauge("workers_running")),
		taskrunner.OptionTaskTimeHistogram(expvar.NewHistogram("task_time", 10)),
	)

	// Start the runner.
	if err := runner.Start(); err != nil {
		panic(err.Error())
	}

	wg.Add(1)

	// Exit channel for handling SIGINT and SIGTERM.
	exit := make(chan os.Signal, 1)
	signal.Notify(exit, syscall.SIGTERM, syscall.SIGINT)

	// Use taskrunner in a goroutine while listening for the kill signal.
	go func() {
		defer wg.Done()
		for {
			select {
			case <-exit:
				return
			default:

				// Collect the promises after running the HelloWorld tasks.
				promises := make([]taskrunner.Promise, 100)
				for i := 0; i < 100; i++ {
					promises[i] = runner.Run(context.TODO(), &HelloWorldTask{i})
				}

				// Handle the promises.
				for i := range promises {
					res, err := promises[i]()
					if err != nil {
						fmt.Printf("promise failure: res=%+v - err=%+v", res, err)
					}

					_, ok := res.(string)
					if !ok {
						log.Printf("unexpected promise return type - expected string - got %T", res)
					}

				}
			}
		}
	}()

	listener, err := net.Listen("tcp", ":"+strconv.Itoa(*port))
	if err != nil {
		log.Fatalf("could not create new listener - err=%+v", err)
	}

	// Close the listener on kill signal.
	wg.Add(1)
	go func() {
		defer wg.Done()
		<-exit
		listener.Close()
	}()

	mux := http.NewServeMux()
	mux.Handle("/", exp.Handler())

	if err := http.Serve(listener, mux); err != nil {
		log.Fatalf("problem quitting http server - err=%+v", err)
	}

	log.Printf("goodbye! - err=%+v", err)
}
